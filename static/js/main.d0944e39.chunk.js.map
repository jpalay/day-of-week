{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["randomDate","start","Date","end","getTime","Math","random","getDayOfWeek","dayOfWeek","calculateDoomsday","year","centuryCodeCycle","centuryIndex","floor","yearsIntoCentury","length","Result","props","correctPhrases","correctPhrase","classNames","isCorrect","push","className","join","correctAnswers","totalAttempts","DayOfWeek","isSelected","isIncorrect","onClick","NextStep","shouldRevealAnswer","App","useState","date","setDate","setShouldRevealAnswer","selectedDay","setSelectedDay","setCorrectAnswers","setTotalAttempts","dateString","getMonth","getMonthName","getDate","getFullYear","Array","fill","map","_","i","getDay","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0944e39.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction randomDate() {\n  const start = new Date(1800, 0, 1)\n  const end = new Date(2099, 11, 31)\n  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\n}\n\nfunction getMonthName(date) {\n  return [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n  ][date.getMonth()];\n}\n\nfunction getDayOfWeek(dayOfWeek) {\n  return [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][dayOfWeek];\n}\n\nfunction App() {\n  const [date, setDate] = useState(randomDate())\n  const [shouldRevealAnswer, setShouldRevealAnswer] = useState(false);\n  const [selectedDay, setSelectedDay] = useState(null)\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [totalAttempts, setTotalAttempts] = useState(0);\n\n  const dateString = `${getMonthName(date)} ${date.getDate()}, ${date.getFullYear()}`\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-dateLine\">\n        <div className={\"App-date\"}>{dateString}</div> fell on a\n      </div>\n      {\n        new Array(7).fill(0)\n          .map(\n            (_, i) =>\n              <DayOfWeek\n                key={i}\n                dayOfWeek={i}\n                onClick={ () => !shouldRevealAnswer ? setSelectedDay(i) : null }\n                isSelected={ !shouldRevealAnswer && selectedDay === i }\n                isCorrect={\n                  shouldRevealAnswer\n                    && date.getDay() === i\n                }\n\n                isIncorrect={\n                  shouldRevealAnswer\n                    && selectedDay === i\n                    && date.getDay() !== i\n\n                }\n              />\n          )\n      }\n\n      {\n        shouldRevealAnswer\n          ? <Result\n            isCorrect={date.getDay() === selectedDay}\n            correctAnswers={correctAnswers}\n            totalAttempts={totalAttempts}\n            year={date.getFullYear()}\n          />\n          : null\n      }\n\n      {\n        selectedDay === null\n          ? null\n          :<NextStep\n            shouldRevealAnswer={shouldRevealAnswer}\n            onClick={() => {\n              if (!shouldRevealAnswer) {\n                setTotalAttempts(totalAttempts + 1);\n                if (date.getDay() === selectedDay) {\n                  setCorrectAnswers(correctAnswers + 1);\n                }\n                setShouldRevealAnswer(true)\n              } else {\n                setShouldRevealAnswer(false);\n                setDate(randomDate());\n                setSelectedDay(null);\n              }\n            }}\n          />\n      }\n    </div>\n  );\n}\n\nfunction calculateDoomsday(year) {\n  const centuryCodeCycle = [5, 3, 2, 0]\n  let centuryIndex = Math.floor(year / 100) - 18\n  while (centuryIndex < 0) {\n    centuryIndex += 4;\n  }\n  const centuryCode = centuryCodeCycle[centuryIndex % centuryCodeCycle.length];\n\n  const yearsIntoCentury = year % 100;\n  const numLeapYears = Math.floor(yearsIntoCentury / 4);\n\n  return (centuryCode + yearsIntoCentury + numLeapYears) % 7;\n}\n\nfunction Result(props) {\n  const correctPhrases = [\"Correct!\", \"Exactly!\", \"Right on!\", \"You got it!\", \"That's right!\"]\n  const correctPhrase = correctPhrases[Math.floor(Math.random()*correctPhrases.length)];\n\n  const classNames = [\"Result\"]\n  if (props.isCorrect) {\n    classNames.push(\"Result--correct\")\n  } else {\n    classNames.push(\"Result--incorrect\")\n  }\n\n  return <div className={classNames.join(\" \")}>\n    <div className=\"Result-result\">\n      { props.isCorrect ? correctPhrase : \"incorrect - try again!\" }\n    </div>\n    <div className=\"Result-record\">\n      ({props.correctAnswers}/{props.totalAttempts}) - pi day fell on a {getDayOfWeek(calculateDoomsday(props.year))}\n    </div>\n  </div>\n}\n\nfunction DayOfWeek(props) {\n  const classNames = [\"DayOfWeek\"]\n\n  if (props.isSelected) {\n    classNames.push(\"DayOfWeek--selected\");\n  }\n\n  if (props.isCorrect) {\n    classNames.push(\"DayOfWeek--correct\")\n  }\n\n  if (props.isIncorrect) {\n    classNames.push(\"DayOfWeek--incorrect\")\n  }\n\n  return (\n    <div className={classNames.join(\" \")} onClick={props.onClick} >\n      <span className=\"DayOfWeek-text\">{ getDayOfWeek(props.dayOfWeek) }</span>\n    </div>\n  )\n}\n\nfunction NextStep(props) {\n  return (\n    <div className=\"NextStep\" onClick={props.onClick}>\n      { props.shouldRevealAnswer ? \"Try another\" : \"Check answer\" }\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}